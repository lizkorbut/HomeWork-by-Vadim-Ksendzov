1) Прочитать про клиент-серверную архитектуру
	Клиент-серверная архитектура - архитектура, в которой сетевая нагрузка распределяется между поставщиками (сервер) и заказчиками (клиенты) услуг, где клиент отправляет запрос (requirest), а сервер отправляет ответ (responce).
	Особености:	
	Клиент - наличие графического интерфейса, возможность формулимровать и отправлять запросы, получение ответа.
	Сервер - работа с клиентскими запросами (все вычисления проходят на сервере), хранение, защита и регулирование доступа к данным, ответ клиенту на запрос.

2) Что такое HTTP и HTTPS
	http - hyper text transfer protocol - клиент-серверный протокол передачи гипертекста с гиперссылками по модели (клиент-requirest - сервер-responce), которые представляют собой конкретный путь до другого файла
	http состоит из стартовой строки (метод + url - ОБЯЗАТЕЛЬНЫЙ элемент), заголовка (параметры, которые определяют запрос или описывают тело сообщения) и тела сообщения (данные, которые или передаем в запросе, или получаем ответ).
	https - расширение протокола http, secure которое шифрует все данные при передаче и делает невозможным их чтение при перехвате с помощью таких механизмов (протоколов), как SSL (secure sockets layer - сертификат, который идентифицирует) и TLS (transport layer security - проверяет подлинность сервера и шифрует данные).

3) HTTP методы
	Методы указывают, какое желаемое действие выполнитсч для данного ресурса.
	GET - запрашивает предоставление ресурса, запрос может только извлекать данные
	HEAD - запрашивает предоставление ресурса, но без тела ответа, как у GET
	POST - используется для отправки сущностей к определенному ресурсу, вызывает изменения на сервере
	PUT - заменяет все текущие представления ресурса данными запроса
	DELETE - удаляет указанные ресурс
	CONNECT - устанавливает "тунель" к серверу, определенному по ресурсу
	OPTIONS - для описания параметров соединения с ресурсом
	TRACE - выополняет вызов возвращаемого тестового сообщения с ресурса
	PATCH - используется для частичного изменения ресурса

	Виды методов
	Безопасные (не изменяют состояние сервера) - GET, HEAD, OPTIONS
	Идемпотентные (повторные идентичный запрос, сделанный один или > раз подряд, имеет один и тот же эффект, не хменяющий состояние сервера; нет побочных эффектов на сервере, кроме сбора статистики) - GET, HEAD, PUT, DELETE
	Кешируемые (http-ответы, которе сохраняются для дальнейшего восстановления и использования, снижая частоту запросов к серверу)

4) HTTP статус коды сервера
	Коды сервера указывают, был ои успешно выполнен запрос на сервер
	1хх - информирование о процессе передачи запроса
		100 - Continue - запрос успешно принят, клиент может продолжать 
		102 - Switching protocol - сервер обрабатывает запрос
	2хх - информирование об успешной передаче ответа
		200 - OK - запрос успешно обработан
		201 - Created - запрос выполнен, ресурс создан
		202 - Accepted - запрос принят, но еще не обработан
	3хх - информирование о перенаправлении
		300 - Multiple choice - запрос имеет больше одного возможных ответов
		301 - Moves permanently - url запрашиваемого ресурса изменен
	4хх - ошибки клиента
		400 - Bad requirest - сервер не понимает запрос из-за неверного синтаксиса
		401 - Unauthorized - для получения запрашиваемого ответа нужна аутентификация
		403 - Forbidden - у клиента нет прав доступа к содержимому
		404 - Not found - сервер не может найти запрашиваемый ресурс
	5хх - ошибки сервера
		500 - Not implemented - внутрення ошибка сервера
		503 - Service unvailable - сервис не доступен

5) Что такое ядро браузера 
	Ядро - программа или модуль, который отображает контент (файлы HTML, XML, изображения) и информацию о форматировании (в форматах CSS, XML) на основе языка разметки.

6) Какие браузеры какиие ядра используют
	Поддерживаемые (браузер - ядро): 
	1. Chrome, Opera, Chromium - Blink
	2. Mozilla - Gecko
	3. Apple Saferi - WebKit
	4. Konqueror - KHTML

7) Что такое API 
	API (application programming interface - программны интерфейс программирования приложений) - механизм взаимодействия программ между собой с помощью методов, который позволяет использовать функции одного приложения внутри другого для расширения функциональности продукта. 
	API - "прослойка" между приложениями, в которой происхродят процессы, позволяющие двум программам обмениваться информацией и выполнять функции, связанные с обеими сторонами, скрываю внутренний код программ.

8. Что такое ендпоинты
	Эндпоинт (endpoint - конечная точка) - обращение к маршруту отдельным http методом; шлюз, соединяющий серверные процессы приложения с внешним интерфейсом. Эндпоинт выполняет конкретную задачу, принимает параметры и возвращают данные клиенту.

9) URL (URI, URL, URN)
	URL - uniform resource locator - унифицированный определитель местонахождения ресурса, определяет местонахождение ресурса в сети и способ его извлечения.
	URN - uniform resource name - унифицированное имя ресурса, последовательность символов, определяющая только имя некоторого ресурса.
	URI - uniform resource identifier - унифицированный идентификатор ресурса, включает в себя URL и URN.
	Пример:
	https://course.by/login-form
		где URI - https://course.by/login-form
		URL - https://course.by
		URN - course.by/login-form

10) Идемпотентные HTTP методы
	Идемпотентные (повторные идентичный запрос, сделанный один или > раз подряд, имеет один и тот же эффект, не хменяющий состояние сервера; нет побочных эффектов на сервере, кроме сбора статистики) - GET, HEAD, PUT, DELETE
	
11) Безопасные HTTP методы
	Безопасные (не изменяют состояние сервера) - GET, HEAD, OPTIONS

12) Иденфикация, Аутентификация, Авторизация
	Идентификация - процедура, в результате которойдля субъекта выявляется его идентификатор, определяющий субъекта системе (ввод логина).
	Аутентификация - процедура проверки подлинности (проверка совпадения введенного пароля с сохраненным в базе.
	Авторизация - предоставление субъекту прав на выполнение определенных действий (вход в аккаунт).

13) Что такое IP
	IP (internet protocol address) - уникальный идентификатор (адрес) устройства (компьютера), подключенного к локальной сети или интернету, построенный на основе стека протоколов TCP/IP.
	IP-адреса представляют собой основной тип адресов, на основании которых сетевой уровень протокола IP передаёт пакеты между сетями. 
	IP-адрес представляет собой серию чисел десятичной системы, разделенных на четыре октета. Пример IP-адреса - 125.251.05.121

14) Что такое октеты в DNS
	IP-адрес представляет собой серию чисел десятичной системы, разделенных на четыре части, которые называют октетами. Пример IP-адреса - 125.251.05.121 (октет - 125). Каждый октет может принимать значение от 0 до 255. Либо в системе двоичных цифр, октет представляет собой восемь чисел - 00100101. Каждый октет может принимать значения 0;1.

	DNS (domain name system) - система доменных имен, централизованная служба, основанная на распределенной базе отображений: "доменное имя - IP-адрес" (поле использования URL посылается запрос в на сервер DNS, который отыскивает URL и преобразует его в IP адрес).

15) Что такое порт, сколько портов у Linux сервера
	Порт - это числовой идентификатор программы или процесса, которые обслуживают сетевые соединения на заданном сетевом адресе (IP-адресе).
	Так как у всем устройств, подключенных к одному роутеру, будет присвоен IP-адрес роутера, который виден в интернете. Чтобы обратиться к нужному компьютеру, нужен порт, который идентифицирует конкретное устройство. 	Например, IP-адрес роутера - 125.215.52.105, чтобы обратиться к конкретному устройству, необходимо указать его порт - 125.215.52.105:1250.
	
	Системные порты Linux - известные порты для типичного использования системы. Номера от 0 до 1023.
	Пользовательские порты Linux - зарегистрированные порты, варьируются от 1024 до 49151.
	Частные порты Linux - динамические порты, не привязаны к конкретным приложениям, от 49152 до 65535.

16) Уровни OSI
	Сетевая модель OSI (the open systems interconnection model) - сетевая модель стека сетевх протоколов, с помощью которой сетевые устройства могут взаимодействовать друг с другом. Модель OSI разработана для описания аритектуры и принципов работы сетей передачи данных, где ысегда есть отправитель и получатель.
	Модель OSI состоит из 7 уровней:
	host layers
		7 прикладной (application)
		6 представления (presentation)
		5 сеансовый (session)
		4 транспортный (transport)
	media layers
		3 сетевой (network)  
		2 канальный (data link)
		1 физический (physical)
	Пример: пользователь отправляет картинку, которая обрабатывается на 7 уровне в виде данных, данные долдны пройти все уровни до первого, где данные будут преобразованы в биты (процесс инкапсуляции, обратный процесс - декапсуляция).

	Процесс (декапсуляция): 
	1 физический (physical) - оперирует битами через провода/Bluetooth, Wi-Fi, 4G.
	2 канальный (data link) - решает проблему адресации при передачи информации, получает биты и превращает их в кадры, используя в качестве адресов только физические МАС-адреса.
	3 сетевой (network) -  маршрутизаторы получают MAC-адрес от коммутаторов с предыдущего уровня и занимаются построением маршрута от одного устройства к другому с учетом всех потенциальных неполадок в сети.
	4 транспортный (transport) - занимается транспортировкой пакетов.
	5 сеансовый (session) - отвечает за поддержку сеанса или сессии связи. Пример: видеозвонок по связи, где звук и видео должны проигрываться одновременно.
	6 представления (presentation) - занимается шифрованием данных, представляет данные в понятном человеку и машине виде (перевод кодировок, представление картинок в .jpeg, .gif)
	7 прикладной (application) - графический интерфейс, использует свои протоколы, чтобы пльзователь увидела данные в понятном виде.

17) Хедеры http запросов
	Хедеры - параметры, которые несут определенную служеюную информацию о соединении по http. 
	В зависимости от местоположения, заголовки разделяются на:
	general - должны быть и в запросах, ив ответах клиента и сервера
	request - используются только в запросах клиента
	responce - используют тольео в ответах сервера
	entity - сопровождают каждую сущность сообщения
	Заголовки HTTP важны для контроля, как кэш и браузеры обрабатывают контент.